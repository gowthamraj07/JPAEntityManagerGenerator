package com.techryte.src.controller;

import java.util.LinkedList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.techryte.catering.manager.IngredientManager;
import com.techryte.catering.manager.ItemManager;
import com.techryte.catering.model.Ingredient;
import com.techryte.catering.model.Item;
import com.techryte.catering.model.list.IngredientList;
import com.techryte.catering.model.list.ItemList;
import com.techryte.src.utilities.ResponseDto;

@Controller
public class DAOController {
	
	ItemManager itemManager;
	IngredientManager ingredientManager;
	
	
	@Autowired
	public void setItemManager(ItemManager itemManager) {
		this.itemManager = itemManager;
	}

	@Autowired
	public void setIngredientManager(IngredientManager ingredientManager) {
		this.ingredientManager = ingredientManager;
	}


	@RequestMapping(value="/addItem", method=RequestMethod.POST)
	@ResponseBody
	public ResponseDto<String> addItem(@RequestBody Item item) {
		ResponseDto<String> response = new ResponseDto<String>();
		try {
			if(item == null) {
				throw new NullPointerException("data not assigned properly");
			}
			itemManager.addItem(item);
			response.setData("true");
		} catch (Exception e) {
			e.printStackTrace();
			response.setData("false");
		}
		return response;
	}
	
	@RequestMapping(value="/addItems", method=RequestMethod.POST)
	@ResponseBody
	public ResponseDto<String> addItems(@RequestBody ItemList li) {
		ResponseDto<String> response = new ResponseDto<String>();
		try {
			if(li == null) {
				throw new NullPointerException("data not assigned properly");
			}
			System.out.println(li);
			itemManager.addItems(li);
			response.setData("true");
		} catch (Exception e) {
			e.printStackTrace();
			response.setData("false");
		}
		return response;
	}
	
	
	@RequestMapping(value="/getItem", method=RequestMethod.GET)
	@ResponseBody
	public ResponseDto<Item> getItem(@RequestParam(value="id", required=false) Integer id
			, @RequestParam(value="name", required=false) String name) {
		ResponseDto<Item> response = new ResponseDto<Item>();
		Item i = null;
		if(id != null) {
			i = itemManager.getItemByItemId(id);
		} else if(name != null) {
			i = itemManager.getItemByItemName(name);
		} 
		response.setData(i);
		
		return response;
	}
	
	@RequestMapping(value="/countItem", method=RequestMethod.GET)
	@ResponseBody
	public ResponseDto<String> countItem() {
		ResponseDto<String> response = new ResponseDto<String>();
		response.setData(""+itemManager.getItemsCount());
		return response;
	}
	
	@RequestMapping(value="/getAllItems", method=RequestMethod.GET)
	@ResponseBody
	public ResponseDto<List<Item>> getAllItems(@RequestParam(value="category", required=false) String category) {
		ResponseDto<List<Item>> response = new ResponseDto<List<Item>>();
		List<Item> items = new LinkedList<Item>();
		if(category != null) {
			items.addAll(itemManager.getItemByCategoryName(category));
		} else {
			items.addAll(itemManager.getAllItem());
		}
		response.setData(items);
		return response;
	}
	
	@RequestMapping(value="/getAllIngredients", method=RequestMethod.GET)
	@ResponseBody
	public ResponseDto<List<Ingredient>> getIngredients(@RequestParam(value="category", required=false) String category) {
		ResponseDto<List<Ingredient>> response = new ResponseDto<List<Ingredient>>();
		List<Ingredient> ingredients = new LinkedList<Ingredient>();
		if(category != null) {
			ingredients.addAll(ingredientManager.getIngredientByCategoryName(category));
		} else {
			ingredients.addAll(ingredientManager.getAllIngredient());
		}
		response.setData(ingredients);
		return response;
	}
	
	@RequestMapping(value="/getIngredient", method=RequestMethod.GET)
	@ResponseBody
	public ResponseDto<Ingredient> getIngredient(@RequestParam(value="name", required=false) String name) {
		ResponseDto<Ingredient> response = new ResponseDto<Ingredient>();
		Ingredient i = null;
		if(name != null) {
			i = ingredientManager.getIngredientByIngredientName(name);
		} 
		response.setData(i);
		
		return response;
	}
	
	
	@RequestMapping(value="/countIngredients", method=RequestMethod.GET)
	@ResponseBody
	public ResponseDto<String> countIngredients() {
		ResponseDto<String> response = new ResponseDto<String>();
		response.setData(""+ingredientManager.getIngredientsCount());
		return response;
	}

	@RequestMapping(value="/addIngredient", method=RequestMethod.POST)
	@ResponseBody
	public ResponseDto<String> addIngredient(@RequestBody Ingredient i) {
		ResponseDto<String> response = new ResponseDto<String>();
		try {
			ingredientManager.addIngredient(i);
			response.setData("true");
		} catch (Exception e) {
			e.printStackTrace();
			response.setData("false");
		}
		return response;
	}
	
	@RequestMapping(value="/addIngredients", method=RequestMethod.POST)
	@ResponseBody
	public ResponseDto<String> addIngredients(@RequestBody IngredientList li) {
		ResponseDto<String> response = new ResponseDto<String>();
		try {
			ingredientManager.addIngredients(li);
			response.setData("true");
		} catch (Exception e) {
			e.printStackTrace();
			response.setData("false");
		}
		return response;
	}
	
	@RequestMapping(value="/getIngredientsUnits", method=RequestMethod.GET)
	@ResponseBody
	public ResponseDto<List<String>> getIngredientsUnits() {
		ResponseDto<List<String>> response = new ResponseDto<List<String>>();
		List<String> units = new LinkedList<String>();
		units.addAll(ingredientManager.getUnitList());
		response.setData(units);
		return response;
	}
	
	@RequestMapping(value="/getIngredientsCategoryNames", method=RequestMethod.GET)
	@ResponseBody
	public ResponseDto<List<String>> getIngredientsCategoryNames() {
		ResponseDto<List<String>> response = new ResponseDto<List<String>>();
		List<String> units = new LinkedList<String>();
		units.addAll(ingredientManager.getCategoryList());
		response.setData(units);
		return response;
	}

}
